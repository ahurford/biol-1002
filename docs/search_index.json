[["index.html", "BIOL 1002: Principles of Biology 1002 1 Managing Biological Data 1.1 Lab 1: Data in Tables", " BIOL 1002: Principles of Biology 1002 Jake Prosser, Yolanda Wiersma, Amy Hurford 1 Managing Biological Data 1.1 Lab 1: Data in Tables Overview: In this week’s lab, we will be building on the R skills you learned in BIOL 1001. We will be focusing on manipulating and organizing data in tables, and learn a useful package called dplyr (pronounced “d-plier”) Before coming to lab Install: R and RStudio (if you have not already). Read: Introduction to R - Workflow Introduction to R - Working directory Entering and loading data - Loading or importing data Entering and loading data - Inspecting the data Best practices Handling data Remember! The Quantitative Skills for Biology manual you used in BIOL 1001 is still online (and updated regularly). If you need to review how to install and use R, please the manual! You can access it here: https://ahurford.github.io/quant-guide-all-courses/. When using R, you have many ways to get help. In addition, this week’s lab is taken from Week 3: Data in Tables of the online course Data Carpentry for Biologists by Dr. Ethan White. If you are not sure how to execute a particular command, you can refer to the Lecture material on Dr. White’s website and/or his instructional videos that go with the Data in Tables lesson. The example data in the lecture material and videos is different from the data you use in the exercise. After the following lab you should be able to: install packages and load data, understand the data manipulation functions of dplyr, and execute a simple import and data filter scenario TO HAND-IN You are to hand in a .R file, formatted as shown in Best Practices - Template, where the lines of code to produce the output asked for under HAND-IN are produced in the order they are asked for. Getting started Review best practices for guidance on how to organize your files. Download, to an appropriate folder, the following .csv files from Brightspace: shrub-volume-data.csv gainesville-precip.csv surveys.csv Open and save a new R Script. Complete the information at the start of the R Script template. Set your working directory Install and load the dplyr R package. If you’re unsure how to install a package, see R Packages. Throughout these instructions are links to the relevant sections in the Quantitative Skills for Biology. If you do not complete these steps, you will not be able to complete the HAND IN questions. 1.1.1 Shrub Volume Data Basic After writing the command in your R script to install dplyr, next import the data. If you use the programmatic way (i.e., command line), your command may look something like this: ShrubData &lt;- read.csv(&quot;lab_data/shrub-volume-data.csv&quot;) The exact command will depend on where you saved shrub-volume-data.csv and how you have set your working directory. You may call your dataset ShrubData or give it a different name. You will need this command in your R script or you will not be able to complete the HAND-IN questions that appear next. HAND-IN. [Q1] Add a line of code to your R Script, where you use the select() function to select the site and experiment columns of shrub-volume-data.csv (note: that above we named this file, ShrubData: you many have given it a different name). To learn how to use the select() function click on the select() link above. HAND IN. [Q2] Add a line of code to your R Script, where you use the mutate() function to create a column called area. (Reminder, the area of a rectangle is equal to the length * width). HAND IN. [Q3] Add a commented out line of code to your R Script, that answers the following question: does the arrange() function: (a) reorder all the rows in ShrubData based on the ascending order of the value in the width column, or (b) reorder only the width column? HAND IN. [Q4] Add a line of code to your R Script, where you use the arrange() function to sort the data based on the length column. HAND IN. [Q5] Add a line of code to your R Script, where you use the filter() function, filter the data to only include plants with length longer than 5 cm. HAND IN. [Q6] Add a line of code to your R Script, where you use the filter() function to show all entries with plants with length greater then 4 cm and width greater then 2cm. HAND IN. [Q7] Add a line of code to your R Script, where you use the filter() function, filter the data to only include plants from experiment 1 or 2. HAND IN. [Q8] Add a line of code to your R Script, where you use the filter() function, remove the rows with NA from your data. 1.1.2 Mean maximum monthly temperature in Bay D’Espoir In this section, we want you to use max_temperature_data.csv which you have already downloaded from Brightspace: calculate the average precipitation in each month across years plot the monthly averages as a simple line plot Metadata Overview The data are from Bay D’Espoir GEN STN. and are originally sourced from Environment and Climate Change Canada. Bay D’Espoir station 1 is located in Newfoundland at -55.48 W Longitude and 47.59 N latitude. The station Climate ID number is 8400413 . The dataset provided, max_temperature_data.csv, is a cleaned version of the data download. Columns in the data frame Column 1: Year - The year of the recording Column 2: Month - The month of the recording, i.e. 1=January; 2=February; etc Column 3: Day - The day of the recording Column 4: Max.Temp.C - The maximum temperature recorded on that day in degrees Celcius. We can use the colMeans function to take the mean of each column within a data frame. We will be demonstrating this using the ShrubData but you will use the weather data. col_means &lt;- colMeans(ShrubData) # To show the column means, you will need to use the print() command print(col_means) ## site experiment length width height ## 2.500000 2.000000 2.558333 NA 4.550000 We can see that the means for each column was calculated. HAND IN Using the weather_data, calculate the mean precipitation for each month and produce a simple line plot. You will hand in both the R code and the plot. Your plot should resemble the line plot below. You will need to change the axis titles. plot(monthly_temp$Month,monthly_temp$mean, type = &quot;l&quot;, xlab = &quot;Month&quot;, ylab =&quot;Mean Precipitation (ml)&quot;) 1.1.3 Bird Banding The number of birds banded at a series of sampling sites has been counted by your field crew and entered into the following vector. number_of_birds &lt;- c(28, 32, 1, 0, 10, 22, 30, 19, 145, 27, 36, 25, 9, 38, 21, 12, 122, 87, 36, 3, 0, 5, 55, 62, 98, 32, 900, 33, 14, 39, 56, 81, 29, 38, 1, 0, 143, 37, 98, 77, 92, 83, 34, 98, 40, 45, 51, 17, 22, 37, 48, 38, 91, 73, 54, 46, 102, 273, 600, 10, 11) Counts are entered in order and sites are numbered starting at one. Using the following vector, answer the following questions and print the results on the screen. The following functions maybe useful: length(), max(), min(), sum(), and mean(). Function Overview max() indicates the maximum value in a vector min() indicates the minimum value in a vector length() indicates the total number of rows, or length of entries in a vector sum() adds or takes the sum of all values in a column mean() calculates the mean for a vector HAND IN Answer the following using the commands provided above. How many sites are there? What is the total number of birds counted across all of the sites? What is the smallest number of birds counted? What is the largest number of birds counted? What is the average number of birds seen at a site? How many birds were counted at the last site? Have the computer choose the last site automatically in some way, not manually entering its position. Do you know a function that will give you a position of the last value? (since positions start at 1 position of the last value in a vector is the same as its length) How many birds were counted at site 42? 1.1.4 Portal Data Manipulation Download a copy of the survey data from Brightspace and load it into R using read.csv(). HAND IN Answer the following. Using the select() function create a new data frame called survey_new that only contains the columns year, month, day, and species_id in that order. Using the mutate(), select(), filter(), and !is.na() functions to create a new data frame with only year(), species_id and weight() in kilograms of each individual. The weight in the table is given in grams, so you will need to create a new column or convert weight into kilograms. (Recall that 1 g = 0.001 kg.) Use the filter() function, print only the rows in the data frame for the species ID =SH. 1.1.5 Portal Data Manipulation Pipes Using the survey data we will be using the %&gt;% pipe operations to manipulate the data. The pipe operation can be used to easy combine previous functions. The pipe function allows for separate functions to be combined. For example, instead of creating two data frames where one removes na entries and the other adds new columns, the pipe operation combines them. Below is an example, I will create a new data frame with only month(), plot_id() and a new column wight_mil. new_pipe_survey_df &lt;- survey %&gt;% filter(!is.na(weight)) %&gt;% mutate(weight_mil=weight*100) %&gt;% select(month, plot_id, weight_mil) You can see that the same functions are used above in section 2.1.4 Portable Data Manipulation, but rather than listing each command individually, the functions are connected via the %&gt;% pipe operation. HAND IN: Using the %&gt;% operation, answer the following questions. Using the mutate(), select(), filter(), and/or !is.na() functions to create a new data frame with only year(), species_id and weight() in kilograms of each individual. Use the filter() and select() to get the year, month, day, weight in kg, and species_id columns for all of the rows in the data frame where species_id is SH. Use the head() command to print the top of the data frame. ## year month day weight_kg species_id ## 1 1978 11 4 0.89 SH ## 2 1982 5 21 1.06 SH ## 3 1982 6 29 0.52 SH ## 4 1986 10 4 0.55 SH ## 5 1987 7 26 0.77 SH ## 6 1987 8 26 0.78 SH Above is the head() print out of the %&gt;% piped operation. Does it look similar to yours? "]]
